public async Task<PatientNotesDeatils> GetPatientNotesByIdV1(Guid patientID)
{
    try
    {
        PatientNotesDTO notesobj = new PatientNotesDTO();
        var data = _notesRepository.GetAsync(x => x.Id == patientID);
        if (data.TenantId == _currentUser.Id)
        {
            notesobj.iscreateduser = true;
        }




using ChoETL;
using DocumentFormat.OpenXml.Office2010.Excel;
using iTextSharp.text.pdf.qrcode;
using Microsoft.AspNetCore.Authorization;
using RCM.BillingManagement.Posting.DTO;
using RCM.BillingManagement.Posting.Entity;
using RCM.DropdownManagement.Dropdowns.Entity.Billing;
using RCM.DropdownManagement.Dropdowns.Entity.Patient;
using RCM.OrderManagement.Inventory.Entity;
using RCM.OrderManagement.Order;
using RCM.PatientManagement.Patient;
using RCM.PatientManagement.Patient.Entity;
using RCM.PatientManagement.PatientOptimization.DTO;
using RCM.PatientManagement.PatientOptimization.IService;
using RCM.PatientManagement.Practice.DTO;
using RCM.PatientManagement.Practice;
using RCM.PlatformManagement.Inbound.Container;
using RCM.PlatformManagement.Inbound.Entity;
using RestSharp.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Domain.Repositories;
using Volo.Abp.Identity;
using Volo.Abp.ObjectMapping;
using Volo.Abp.Users;
using static RCM.PlatformManagement.Permissions.PatientManagementPermissions;
using DocumentFormat.OpenXml.Office2010.Word;
using RCM.PlatformManagement.Localization.Enumeration;
using RCM.PlatformManagement.Permissions;
using Abp.Authorization;

namespace RCM.PatientManagement.PatientOptimization
{
    [Authorize]
    public class PatientNotesService :
         CrudAppService<
               PatientNotes,
               PatientNotesDTO,
               Guid, //Primary key 
               PagedAndSortedResultRequestDto, //Used for paging/sorting
               CreateUpdatePatientNotesDTO,
               CreateUpdatePatientNotesDTO>,
           IPatientNotesService,
           ITransientDependency
    {//reshma
        public readonly IRepository<InboundDocument, Guid> _inboundDocumentRepository;
        private readonly IRepository<MedicareChecklist, Guid> _patientMedicareChecklist;
        private readonly IRepository<PatientPersonal, Guid> _personalRepository;
        private readonly IRepository<PatientNotes, Guid> _notesRepository;
        private readonly IRepository<PatientDataMonitor, Guid> _patientDataMonitorRepository;
        private readonly IRepository<MasterNotes, Guid> _masterNotesRepository;
        private readonly IRepository<PatientVerification, Guid> _verificationRepository;
        private readonly IRepository<IdentityUser, Guid> _usersRepository;
        private readonly IRepository<NotesStatus, Guid> _notesStatusRepository;
        private readonly IRepository<PatientAuthorization, Guid> _authorizationRepository;
        private readonly IRepository<NotesSeverity, Guid> _notesSeverityRepository;
        private readonly CustomRolebasePermissionService _permissionChecker;
        private readonly ICurrentUser _currentUser;

        TrimAllStrings oTrimAllStrings = new TrimAllStrings();
        public PatientNotesService(IRepository<PatientNotes, Guid> notesRepository,
            //res
            IRepository<InboundDocument, Guid> inboundDocumentRepository,
            IRepository<PatientPersonal, Guid> personalRepository, IRepository<PatientAuthorization, Guid> authorizationRepository,
            IRepository<IdentityUser, Guid> usersRepository, IRepository<PatientVerification, Guid> verificationRepository,
            IRepository<NotesStatus, Guid> notesStatusRepository, IRepository<MedicareChecklist, Guid> patientMedicareChecklist,
            IRepository<PatientDataMonitor, Guid> patientDataMonitorRepository,
            IRepository<MasterNotes, Guid> masterNotesRepository,
            IRepository<NotesSeverity, Guid> notesSeverityRepository,
            ICurrentUser currentUser,
            CustomRolebasePermissionService permissionChecker
            ) : base(notesRepository)
        {
            _inboundDocumentRepository = inboundDocumentRepository;
            _verificationRepository = verificationRepository;
            _notesRepository = notesRepository;
            _usersRepository = usersRepository;
            _authorizationRepository = authorizationRepository;
            _patientDataMonitorRepository = patientDataMonitorRepository;
            _personalRepository = personalRepository;
            _masterNotesRepository = masterNotesRepository;
            _notesStatusRepository = notesStatusRepository;
            _notesSeverityRepository = notesSeverityRepository;
            _patientMedicareChecklist = patientMedicareChecklist;
            _permissionChecker = permissionChecker;
            _currentUser = currentUser;
        }

        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Create)]
        //Create notes API
        public override async Task<PatientNotesDTO> CreateAsync(CreateUpdatePatientNotesDTO input)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Create);

                // var vMasterNotes11 = (await _masterNotesRepository.GetListAsync(t => t.noteType.ToLower().Contains("medicare checklist") && t.TenantId == CurrentTenant.Id)).ToList();
                PatientNotesDTO patNotes = new PatientNotesDTO();
                if (input.description == null || input.description == string.Empty)
                {
                    throw new UserFriendlyException("Note type and description is mandatory");
                }
                var vPersonal = (await _personalRepository.GetListAsync(a => a.Id == input.patientId)).FirstOrDefault();


                oTrimAllStrings.trimAllStrings(input);
                input.dateCreated = DateTime.Now;

                Int64 iNotesCount = await _notesRepository.GetCountAsync();

                input.defaultNotesId = string.Concat("N", new string(vPersonal?.defaultPatientId?.TakeLast(4)?.ToArray()), DateTime.Now.Date.ToString("yyyyMMdd"), iNotesCount.ToString("D4"));

                input.createdByName = _usersRepository.Where(t => t.Id == CurrentUser.Id).Select(t => t.UserName).FirstOrDefault();

                input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");
                input.TenantId = CurrentTenant.Id;

                // for adding verification notes..
                if (input.patientVerificationId != null && input.patientVerificationId != Guid.Empty)
                {
                    var vVerification = _verificationRepository.Where(i => i.Id == input.patientVerificationId).FirstOrDefault();
                    if (vVerification != null)
                    {
                        vVerification.verificationNotes = vVerification.verificationNotes == null ? new List<string>() : vVerification.verificationNotes;
                        vVerification.verificationNotes.Add(input.NotesDetails);

                        await _verificationRepository.UpdateAsync(vVerification);
                    }
                }

                // for adding precet notes..
                if (input.patientAuthorizationId != null && input.patientAuthorizationId != Guid.Empty)
                {
                    var vAuthorization = _authorizationRepository.Where(i => i.Id == input.patientAuthorizationId).FirstOrDefault();
                    if (vAuthorization != null)
                    {
                        vAuthorization.authorizationNotes = vAuthorization.authorizationNotes == null ? new List<string>() : vAuthorization.authorizationNotes;
                        vAuthorization.authorizationNotes.Add(input.NotesDetails);

                        await _authorizationRepository.UpdateAsync(vAuthorization);
                    }

                }

                // for adding medicare checklist notes..
                if (input.patientMedicareChecklistId != null && input.patientMedicareChecklistId != Guid.Empty)
                {
                    var vMedicareCheck = _patientMedicareChecklist.Where(i => i.Id == input.patientMedicareChecklistId).FirstOrDefault();

                    if (vMedicareCheck != null)
                    {
                        input.noteTypeId = input.noteTypeId;
                        input.noteType = input.noteType;
                        input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                        vMedicareCheck.medicareNotes = vMedicareCheck.medicareNotes;
                       

                        await _patientMedicareChecklist.UpdateAsync(vMedicareCheck);
                    }
                }


                patNotes = await base.CreateAsync(input);

                patNotes.notesId = patNotes.Id;

                return patNotes;

            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }

        //Update notes API
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Edit)]
        public override async Task<PatientNotesDTO> UpdateAsync(Guid id, CreateUpdatePatientNotesDTO input)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Edit);
                var vNoteDetail = await _notesRepository.GetAsync(id);
                if (input.description == null || input.description == string.Empty)
                {
                    throw new UserFriendlyException("Note type and description is mandatory");
                }
                input.createdByName = _usersRepository.Where(t => t.Id == CurrentUser.Id).Select(t => t.UserName).FirstOrDefault();

                input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                if (input.patientVerificationId != null && input.patientVerificationId != Guid.Empty)
                {
                    var vVerification = _verificationRepository.Where(i => i.Id == input.patientVerificationId).FirstOrDefault();
                    if (vVerification != null)
                    {
                        vVerification.verificationNotes = vVerification.verificationNotes == null ? new List<string>() : vVerification.verificationNotes;

                        vVerification.verificationNotes.Add(input.NotesDetails);

                        await _verificationRepository.UpdateAsync(vVerification);
                    }
                }

                // for adding precet notes..
                if (input.patientAuthorizationId != null && input.patientAuthorizationId != Guid.Empty)
                {
                    var vAuthorization = _authorizationRepository.Where(i => i.Id == input.patientAuthorizationId).FirstOrDefault();
                    if (vAuthorization != null)
                    {
                        vAuthorization.authorizationNotes = vAuthorization.authorizationNotes == null ? new List<string>() : vAuthorization.authorizationNotes;
                        vAuthorization.authorizationNotes.Add(input.NotesDetails);

                        await _authorizationRepository.UpdateAsync(vAuthorization);
                    }
                }

                // for adding medicare checklist notes
                // 
                if (input.patientMedicareChecklistId != null && input.patientMedicareChecklistId != Guid.Empty)
                {

                    var vMedicareCheck = _patientMedicareChecklist.Where(i => i.Id == input.patientMedicareChecklistId).FirstOrDefault();

                    if (vMedicareCheck != null)
                    {
                        input.noteTypeId = input.noteTypeId;
                        input.noteType = input.noteType;
                        input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                        vMedicareCheck.medicareNotes = vMedicareCheck.medicareNotes;
                        

                        await _patientMedicareChecklist.UpdateAsync(vMedicareCheck);
                    }
                }
                PatientNotes oPatientNotes = await _notesRepository.GetAsync(id);

                input.defaultNotesId = oPatientNotes.defaultNotesId;
                input.TenantId = CurrentTenant.Id;

                //update the notes details field

                input.createdByName = _usersRepository.Where(t => t.Id == input.createdBy).Select(t => t.UserName).FirstOrDefault();
                input.NotesDetails = string.Concat("" + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.createdByName + " - " + vNoteDetail.CreationTime.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                var vPatientNotes = await base.UpdateAsync(id, input);



                // To Monitor the Patient data changes date and time
                #region PatientDataMonitor
                try
                {
                    PatientDataMonitor patientDataDetails = (await _patientDataMonitorRepository.GetListAsync()).Where(a => a.patientId == input.patientId).FirstOrDefault();
                    if (patientDataDetails != null)
                    {
                        patientDataDetails.patientId = input.patientId;
                        patientDataDetails.description = "NOTES";
                        patientDataDetails.modifiedDate = DateTime.Now;
                        patientDataDetails.TenantId = CurrentTenant.Id;
                        var vPatient = await _patientDataMonitorRepository.UpdateAsync(patientDataDetails);
                    }

                }
                catch (Exception ex)
                {
                    throw new UserFriendlyException(ex.Message);
                }


                #endregion



                return vPatientNotes;
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }
        public override async Task<PatientNotesDTO> GetAsync(Guid id)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                PatientNotes entity = await _notesRepository.FirstOrDefaultAsync(p => p.Id == id);

                if (entity != null)
                {
                    PatientNotesDTO dto = ObjectMapper.Map<PatientNotes, PatientNotesDTO>(entity);                   
                    return dto;
                }
                throw new UserFriendlyException($"No data found for PatientNotesId: {id}");
            }
            catch (Exception ex)
            {
                // For other exceptions, wrap the original exception in a UserFriendlyException
                throw new UserFriendlyException($"An error occurred while fetching data: {ex.Message}");
            }
        }
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Create)]
        public async Task<List<string>> CreatingPatientNotes(CreateUpdatePatientNotesDTO input)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Create);
                PatientNotes patient = new PatientNotes();

                if (input.description == null || input.description == string.Empty)
                {
                    throw new UserFriendlyException("Note type and description is mandatory");
                }
                var vPersonal = (await _personalRepository.GetListAsync(a => a.Id == input.patientId)).FirstOrDefault();


                oTrimAllStrings.trimAllStrings(input);
                input.dateCreated = DateTime.Now;

                Int64 iNotesCount = await _notesRepository.GetCountAsync();

                input.defaultNotesId = string.Concat("N", new string(vPersonal?.defaultPatientId?.TakeLast(4)?.ToArray()), DateTime.Now.Date.ToString("yyyyMMdd"), iNotesCount.ToString("D4"));

                input.createdByName = _usersRepository.Where(t => t.Id == CurrentUser.Id).Select(t => t.UserName).FirstOrDefault();

                input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");
                input.TenantId = CurrentTenant.Id;

                // for adding verification notes..
                if (input.patientVerificationId != null && input.patientVerificationId != Guid.Empty)
                {
                    var vVerification = _verificationRepository.Where(i => i.Id == input.patientVerificationId).FirstOrDefault();
                    if (vVerification != null)
                    {
                        vVerification.verificationNotes = vVerification.verificationNotes == null ? new List<string>() : vVerification.verificationNotes;
                        vVerification.verificationNotes.Add(input.NotesDetails);

                        await _verificationRepository.UpdateAsync(vVerification);
                    }
                }

                // for adding precet notes..
                if (input.patientAuthorizationId != null && input.patientAuthorizationId != Guid.Empty)
                {
                    var vAuthorization = _authorizationRepository.Where(i => i.Id == input.patientAuthorizationId).FirstOrDefault();
                    if (vAuthorization != null)
                    {
                        vAuthorization.authorizationNotes = vAuthorization.authorizationNotes == null ? new List<string>() : vAuthorization.authorizationNotes;
                        vAuthorization.authorizationNotes.Add(input.NotesDetails);

                        await _authorizationRepository.UpdateAsync(vAuthorization);
                    }

                }

                // for adding medicare checklist notes..
                if (input.patientMedicareChecklistId != null && input.patientMedicareChecklistId != Guid.Empty)
                {

                    var vMedicareCheck = _patientMedicareChecklist.Where(i => i.Id == input.patientMedicareChecklistId).FirstOrDefault();

                    if (vMedicareCheck != null)
                    {
                        input.noteTypeId = input.noteTypeId;
                        input.noteType = input.noteType;
                        input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                        vMedicareCheck.medicareNotes = vMedicareCheck.medicareNotes;
                        

                        await _patientMedicareChecklist.UpdateAsync(vMedicareCheck);
                    }
                }

                patient = new PatientNotes
                {
                    noteTypeId = input.noteTypeId ?? default,
                    notesId = default,
                    orderId = input.orderId,
                    claimId = input.claimId,
                    patientId = input.patientId,
                    documentId = input.documentId,
                    patientDocChecklistId = input.patientDocChecklistId,
                    patientMedicareChecklistId = input.patientMedicareChecklistId,
                    patientVerificationId = input.patientVerificationId,
                    patientAuthorizationId = input.patientAuthorizationId,
                    defaultNotesId = input.defaultNotesId,
                    isCallNote = input.isCallNote,
                    noteType = input.noteType,
                    createdBy = input.createdBy,
                    dateCreated = input.dateCreated,
                    actualDate = input.actualDate,
                    dateNeeded = input.dateNeeded,
                    severity = input.severity,
                    status = input.status,
                    dateComplete = input.dateComplete,
                    subject = input.subject,
                    description = input.description,
                    modifiedBy = input.modifiedBy,
                    createdByName = input.createdByName,
                    modifiedDate = input.modifiedDate,
                    TenantId = input.TenantId,
                    assignedTo = input.assignedTo,
                    assignedDate = input.assignedDate,
                    NotesDetails = input.NotesDetails,
                };
                var a = await _notesRepository.InsertAsync(patient);
                List<InboundpatientNotes> vNotes = new List<InboundpatientNotes>();

                //Filter data based on pages (patientVerification and patientMedicareChecklist)
                vNotes = input.patientId != Guid.Empty ? _notesRepository.Where(x => (x.patientId == input.patientId && x.NotesDetails != null)).Select(x => new InboundpatientNotes
                {
                    NotesDetails = x.NotesDetails,
                    creationTime = x.CreationTime,
                    modifiedDate = x.LastModificationTime,
                    patientMedicareChecklistId = x.patientMedicareChecklistId ?? default,
                    patientVerificationId = x.patientVerificationId ?? default,

                }).ToList() : _notesRepository.Where(x => x.documentId == input.documentId && x.NotesDetails != null).Select(x => new InboundpatientNotes
                {
                    NotesDetails = x.NotesDetails,
                    creationTime = x.CreationTime,
                    modifiedDate = x.LastModificationTime,
                    patientMedicareChecklistId = x.patientMedicareChecklistId ?? default,
                    patientVerificationId = x.patientVerificationId ?? default,
                }).ToList();

                if (input.patientVerificationId != Guid.Empty && input.patientVerificationId != null)
                {
                    vNotes = vNotes.Where(x => x.patientVerificationId == input.patientVerificationId).ToList();
                }
                else if (input.patientMedicareChecklistId != Guid.Empty && input.patientMedicareChecklistId != null)
                {
                    vNotes = vNotes.Where(x => x.patientMedicareChecklistId == input.patientMedicareChecklistId).ToList();
                }

                vNotes = vNotes.OrderByDescending(x => DateTime.Compare(x.modifiedDate.GetValueOrDefault(x.creationTime.Value), x.creationTime.Value) <= 0 ? x.creationTime : x.modifiedDate).ToList();



                var datalist = new List<string>();
                datalist.AddRange(vNotes.Select(x => x.NotesDetails).ToList());

                return datalist;

            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Edit)]
        public async Task<List<string>> UpdatingPatientNotes(Guid id, CreateUpdatePatientNotesDTO input)
        {
            try
            {

                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Edit);
                PatientNotes patient = new PatientNotes();
                var vNoteDetail = await _notesRepository.GetAsync(id);

                input.createdByName = _usersRepository.Where(t => t.Id == CurrentUser.Id).Select(t => t.UserName).FirstOrDefault();

                input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");


                if (input.description == null || input.description == string.Empty)
                {
                    throw new UserFriendlyException("Note type and description is mandatory");
                }
                if (input.patientVerificationId != null && input.patientVerificationId != Guid.Empty)
                {
                    var vVerification = _verificationRepository.Where(i => i.Id == input.patientVerificationId).FirstOrDefault();
                    if (vVerification != null)
                    {
                        vVerification.verificationNotes = vVerification.verificationNotes == null ? new List<string>() : vVerification.verificationNotes;
                        vVerification.verificationNotes.Add(input.NotesDetails);

                        await _verificationRepository.UpdateAsync(vVerification);
                    }
                }

                // for adding precet notes..
                if (input.patientAuthorizationId != null && input.patientAuthorizationId != Guid.Empty)
                {
                    var vAuthorization = _authorizationRepository.Where(i => i.Id == input.patientAuthorizationId).FirstOrDefault();
                    if (vAuthorization != null)
                    {
                        vAuthorization.authorizationNotes = vAuthorization.authorizationNotes == null ? new List<string>() : vAuthorization.authorizationNotes;
                        vAuthorization.authorizationNotes.Add(input.NotesDetails);

                        await _authorizationRepository.UpdateAsync(vAuthorization);
                    }
                }

                // for adding medicare checklist notes
                // 
                if (input.patientMedicareChecklistId != null && input.patientMedicareChecklistId != Guid.Empty)
                {
                    var vMedicareCheck = _patientMedicareChecklist.Where(i => i.Id == input.patientMedicareChecklistId).FirstOrDefault();

                    if (vMedicareCheck != null)
                    {
                        input.noteTypeId = input.noteTypeId;
                        input.noteType = input.noteType;
                        input.NotesDetails = string.Concat("" + input.createdByName + " - " + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                        vMedicareCheck.medicareNotes =vMedicareCheck.medicareNotes;
                        

                        await _patientMedicareChecklist.UpdateAsync(vMedicareCheck);
                    }
                }
                PatientNotes oPatientNotes = await _notesRepository.GetAsync(id);

                input.defaultNotesId = oPatientNotes.defaultNotesId;
                input.TenantId = CurrentTenant.Id;

                //update the notes details field

                input.createdByName = _usersRepository.Where(t => t.Id == input.createdBy).Select(t => t.UserName).FirstOrDefault();
                input.NotesDetails = string.Concat("" + DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.createdByName + " - " + vNoteDetail.CreationTime.ToString("MM/dd/yyyy hh:mm:ss tt") + " - " + input.noteType + " - " + input.description + "");

                vNoteDetail.noteTypeId = input.noteTypeId ?? default;
                vNoteDetail.notesId = default;
                vNoteDetail.orderId = input.orderId;
                vNoteDetail.claimId = input.claimId;
                vNoteDetail.patientId = input.patientId;
                vNoteDetail.documentId = input.documentId;
                vNoteDetail.patientDocChecklistId = input.patientDocChecklistId;
                vNoteDetail.patientMedicareChecklistId = input.patientMedicareChecklistId;
                vNoteDetail.patientVerificationId = input.patientVerificationId;
                vNoteDetail.patientAuthorizationId = input.patientAuthorizationId;
                vNoteDetail.defaultNotesId = input.defaultNotesId;
                vNoteDetail.isCallNote = input.isCallNote;
                vNoteDetail.noteType = input.noteType;
                vNoteDetail.createdBy = input.createdBy;
                vNoteDetail.dateCreated = input.dateCreated;
                vNoteDetail.actualDate = input.actualDate;
                vNoteDetail.dateNeeded = input.dateNeeded;
                vNoteDetail.severity = input.severity;
                vNoteDetail.status = input.status;
                vNoteDetail.dateComplete = input.dateComplete;
                vNoteDetail.subject = input.subject;
                vNoteDetail.description = input.description;
                vNoteDetail.modifiedBy = input.modifiedBy;
                vNoteDetail.createdByName = input.createdByName;
                vNoteDetail.modifiedDate = input.modifiedDate;
                vNoteDetail.TenantId = input.TenantId;
                vNoteDetail.assignedTo = input.assignedTo;
                vNoteDetail.assignedDate = input.assignedDate;
                vNoteDetail.NotesDetails = input.NotesDetails;

                var vPatientNotes = await _notesRepository.UpdateAsync(vNoteDetail);
                List<InboundpatientNotes> vNotes = new List<InboundpatientNotes>();

                //Filter data based on pages (patientVerification and patientMedicareChecklist)
                vNotes = input.patientId != Guid.Empty ? _notesRepository.Where(x => (x.patientId == input.patientId && x.NotesDetails != null)).Select(x => new InboundpatientNotes
                {
                    NotesDetails = x.NotesDetails,
                    creationTime = x.CreationTime,
                    modifiedDate = x.LastModificationTime,
                    patientMedicareChecklistId = x.patientMedicareChecklistId ?? default,
                    patientVerificationId = x.patientVerificationId ?? default,
                }).ToList() : _notesRepository.Where(x => x.documentId == input.documentId && x.NotesDetails != null).Select(x => new InboundpatientNotes
                {
                    NotesDetails = x.NotesDetails,
                    creationTime = x.CreationTime,
                    modifiedDate = x.LastModificationTime,
                    patientMedicareChecklistId = x.patientMedicareChecklistId ?? default,
                    patientVerificationId = x.patientVerificationId ?? default,
                }).ToList();

                if (input.patientVerificationId != Guid.Empty && input.patientVerificationId != null)
                {
                    vNotes = vNotes.Where(x => x.patientVerificationId == input.patientVerificationId).ToList();
                }
                else if (input.patientMedicareChecklistId != Guid.Empty && input.patientMedicareChecklistId != null)
                {
                    vNotes = vNotes.Where(x => x.patientMedicareChecklistId == input.patientMedicareChecklistId).ToList();
                }
                vNotes = vNotes.OrderByDescending(x => DateTime.Compare(x.modifiedDate.GetValueOrDefault(x.creationTime.Value), x.creationTime.Value) <= 0 ? x.creationTime : x.modifiedDate).ToList();

                var datalist = new List<string>();
                datalist.AddRange(vNotes.Select(x => x.NotesDetails).ToList());



                // To Monitor the Patient data changes date and time
                #region PatientDataMonitor
                try
                {
                    PatientDataMonitor patientDataDetails = (await _patientDataMonitorRepository.GetListAsync()).Where(a => a.patientId == input.patientId).FirstOrDefault();
                    if (patientDataDetails != null)
                    {
                        patientDataDetails.patientId = input.patientId;
                        patientDataDetails.description = "NOTES";
                        patientDataDetails.modifiedDate = DateTime.Now;
                        patientDataDetails.TenantId = CurrentTenant.Id;
                        await _patientDataMonitorRepository.UpdateAsync(patientDataDetails);
                    }

                }
                catch (Exception ex)
                {
                    throw new UserFriendlyException(ex.Message);
                }


                #endregion

                return datalist;
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }


        //public override async Task DeleteAsync(Guid id)
        //{

        //    if (id == Guid.Empty)
        //    {
        //        throw new ArgumentException("Id cannot be empty.", nameof(id));
        //    }
        //    try
        //    {

        //        var vNotes = await _notesRepository.GetAsync(a => a.Id == id);
        //        var vMasterNotes= await _masterNotesRepository.GetAsync(a=> a.Id == vNotes.noteReason);

        //        if (vMasterNotes == null)
        //        {
        //            await _notesRepository.DeleteAsync(id);
        //        }
        //        else
        //        {
        //            throw new UserFriendlyException("You cannot delete the Notes Reson  it is used in Patient Notes.");
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        throw new UserFriendlyException(ex.Message);
        //    }
        //}

        //Get notes list API
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Default)]
        public override async Task<PagedResultDto<PatientNotesDTO>> GetListAsync(PagedAndSortedResultRequestDto input)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                //  var notecomments = (await _inboundDocumentRepository.GetListAsync()).ToList();
                // var comments = _inboundDocumentRepository;
                var vNotes = (await _notesRepository.GetListAsync()).ToList();
                var vPatients = (await _personalRepository.GetListAsync()).ToList();
                //var vMasterNotes = (await _masterNotesRepository.GetListAsync()).ToList();
                var vUsers = (await _usersRepository.GetListAsync()).ToList();
                // var vStatus = (await _notesStatusRepository.GetListAsync()).ToList();
                // var vSeverity = (await _notesSeverityRepository.GetListAsync()).ToList();
                var inbonddetails = await _inboundDocumentRepository.GetListAsync();
                //var patientNotesList = new List<PatientNotesDTO>();
                //  res  its retrive notes details from inbonddocuments
                var patientNotesList1 = (from inboundDocument in inbonddetails
                                         join patient in vPatients on inboundDocument.patientId equals patient.Id
                                         where !string.IsNullOrEmpty(inboundDocument.comments)
                                         select new PatientNotesDTO
                                         {
                                             patientId = inboundDocument.patientId ?? Guid.Empty,
                                             description = inboundDocument.comments,
                                             // noteType = "general"
                                         }).ToList();

                //res its retrives notes from both inbonddocuments and patents notes

                var finalList = patientNotesList1.Concat(vNotes.Select(a => new PatientNotesDTO
                {

                    patientId = a.patientId.HasValue ? a.patientId.Value : Guid.Empty,
                    description = a.description,
                    defaultNotesId = a.defaultNotesId,
                    createdBy = a.createdBy,
                    dateCreated = a.dateCreated,
                    actualDate = a.actualDate,
                    dateNeeded = a.dateNeeded,
                    status = a.status,
                    dateComplete = a.dateComplete,
                    //noteReason = a.noteReason,
                    severity = a.severity,
                    subject = a.subject,
                    noteTypeId = a.noteTypeId,
                    noteType = a.noteType,
                    CreationTime = a.CreationTime,
                    LastModificationTime = a.LastModificationTime,
                    //NotesDetails = a.NotesDetails
                })).ToList();
                var vCombinedList = (from combine in finalList
                                     join user in vUsers on combine.assignedTo equals user.Id
                                     into userAssignedTo
                                     from assign in userAssignedTo.DefaultIfEmpty()
                                     select new PatientNotesDTO
                                     {
                                         patientId = combine.patientId != Guid.Empty ? combine.patientId : Guid.Empty,
                                         description = combine.description,
                                         claimId = combine.claimId != Guid.Empty ? combine.claimId : Guid.Empty,
                                         orderId = combine.orderId != Guid.Empty ? combine.orderId : Guid.Empty,
                                         defaultNotesId = combine.defaultNotesId,
                                         dateComplete = combine.dateComplete,
                                         dateCreated = combine.dateCreated,
                                         dateNeeded = combine.dateNeeded,
                                         subject = combine.subject,
                                         severity = combine.severity,
                                         actualDate = combine.actualDate,
                                         // noteReason = combine.noteReason,
                                         notesId = combine.notesId,
                                         noteTypeId = combine.noteTypeId,
                                         noteType = combine.noteType,
                                         status = combine.status,
                                         assignedDate = combine.assignedDate,
                                         assignedTo = combine.assignedTo,
                                         assignedToName = assign == null ? "" : assign.UserName,
                                         createdBy = combine.createdBy,
                                         CreationTime = combine.CreationTime,
                                         CreatorId = combine.CreatorId,
                                         modifiedBy = combine.modifiedBy,
                                         modifiedDate = combine.modifiedDate,
                                         LastModificationTime = combine.LastModificationTime,
                                         LastModifierId = combine.LastModifierId,
                                         Id = combine.Id,
                                         //NotesDetails = combine.NotesDetails,
                                     }).ToList();
                vCombinedList = vCombinedList.OrderByDescending(x => DateTime.Compare(x.LastModificationTime.GetValueOrDefault(x.CreationTime), x.CreationTime) <= 0 ? x.CreationTime : x.LastModificationTime).ToList();

                return new PagedResultDto<PatientNotesDTO>(vCombinedList.Count, vCombinedList);

                // return new PagedResultDto<PatientNotesDTO>(notes.Count,
                //    ObjectMapper.Map<List<PatientNotes>, List<PatientNotesDTO>>(notes));
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }

        //Get notes based on the patient id
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Default)]
        public async Task<List<PatientNotesDTO>> getPatientNotes(Guid patientId)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                //var vNotes = (await _notesRepository.GetListAsync()).ToList();
                var vPatients = (await _personalRepository.GetListAsync()).ToList();
                var inbonddetails = await _inboundDocumentRepository.GetListAsync();
                var vUserDetails = await _usersRepository.GetListAsync();

                List<PatientNotes> lstPatientNotes = await _notesRepository.GetListAsync();

                //  res  its retrive notes details from inbonddocuments
                var patientNotesList1 = (from inboundDocument in inbonddetails
                                         join patient in vPatients on inboundDocument.patientId equals patient.Id
                                         where !string.IsNullOrEmpty(inboundDocument.comments)
                                         select new PatientNotesDTO
                                         {
                                             patientId = inboundDocument.patientId ?? Guid.Empty,
                                             description = inboundDocument.comments,
                                             // noteType = "general"
                                         }).ToList();

                // Concatenate patientNotesList1 and inbonddetails
                var combinedList = patientNotesList1.Concat(ObjectMapper.Map<List<PatientNotes>, List<PatientNotesDTO>>(lstPatientNotes)).ToList();

                combinedList = combinedList.Where(a => a.patientId == patientId).ToList();
                var vCombinedList = (from combine in combinedList
                                     join user in vUserDetails on combine.assignedTo equals user.Id
                                     into userAssignedTo
                                     from assign in userAssignedTo.DefaultIfEmpty()
                                     select new PatientNotesDTO
                                     {
                                         patientId = combine.patientId != Guid.Empty ? combine.patientId : Guid.Empty,
                                         description = combine.description,
                                         claimId = combine.claimId != Guid.Empty ? combine.claimId : Guid.Empty,
                                         orderId = combine.orderId != Guid.Empty ? combine.orderId : Guid.Empty,
                                         defaultNotesId = combine.defaultNotesId,
                                         dateComplete = combine.dateComplete,
                                         dateCreated = combine.dateCreated,
                                         dateNeeded = combine.dateNeeded,
                                         subject = combine.subject,
                                         severity = combine.severity,
                                         actualDate = combine.actualDate,
                                         //noteReason = combine.noteReason,
                                         notesId = combine.notesId,
                                         noteTypeId = combine.noteTypeId,
                                         noteType = combine.noteType,
                                         status = combine.status,
                                         assignedDate = combine.assignedDate,
                                         assignedTo = combine.assignedTo,
                                         assignedToName = assign == null ? "" : assign.UserName,
                                         createdBy = combine.createdBy,
                                         CreationTime = combine.CreationTime,
                                         CreatorId = combine.CreatorId,
                                         modifiedBy = combine.modifiedBy,
                                         modifiedDate = combine.modifiedDate,
                                         LastModificationTime = combine.LastModificationTime,
                                         LastModifierId = combine.LastModifierId,
                                         Id = combine.Id,
                                     }).ToList();
                vCombinedList = vCombinedList.OrderByDescending(x => DateTime.Compare(x.modifiedDate.GetValueOrDefault(x.dateCreated.Value), x.dateCreated.Value) <= 0 ? x.dateCreated.Value : x.modifiedDate).ToList();
                return vCombinedList;

                //lstPatientNotes = lstPatientNotes.Where(a => a.patientId == patientId).ToList();
                //return ObjectMapper.Map<List<PatientNotes>, List<PatientNotesDTO>>(lstPatientNotes);
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }
        //Notes List,search by Patient Id
        //public async Task<List<PatientNotesDTO>> notesSearch(Guid gPatientId, string sNoteId, string sNoteType, string sDescription, string sSeverity, string sSubject, string sReason,
        //      string sCreatedBy, Nullable<DateTime> dtCreatedDate, Nullable<DateTime> dtActualDate,
        //    Nullable<DateTime> dtDateNeeded, string sStatus, Nullable<DateTime> dtDateCompleted)
        //{
        //    try
        //    {
        //        if (string.IsNullOrEmpty(gPatientId.ToString()))
        //        {
        //            throw new UserFriendlyException("Patient Guid is Required");
        //        }
        //        List<PatientNotesDTO> patientNotes = new List<PatientNotesDTO>();

        //        //Get Total Notes List
        //        var vNotesList = await _notesRepository.GetListAsync();

        //        //Filter by Patient Id
        //        var vPatientNotes = vNotesList.Where(a => a.patientId == gPatientId).ToList();

        //        //Filter the Patient Notes by parameters
        //        vPatientNotes = vPatientNotes.Where(a =>
        //         (!string.IsNullOrEmpty(sNoteId) ? (a.defaultNotesId.ToLower().Contains(sNoteId.ToLower())) : (a.defaultNotesId == a.defaultNotesId)) &&
        //         //(!string.IsNullOrEmpty(sNoteType) ? (a.noteType.ToLower().Contains(sNoteType.ToLower())) : (a.noteType == a.noteType)) &&
        //         (!string.IsNullOrEmpty(sDescription) ? (a.description.ToLower().Contains(sDescription.ToLower())) : (a.description == a.description)) &&
        //         (!string.IsNullOrEmpty(sSeverity) ? (a.severity.ToLower().Contains(sSeverity.ToLower())) : (a.severity == a.severity)) &&
        //         (!string.IsNullOrEmpty(sSubject) ? (a.subject.ToLower().Contains(sSubject.ToLower())) : (a.subject == a.subject)) &&
        //         //(!string.IsNullOrEmpty(sReason) ? (a.noteReason.ToLower().Contains(sReason.ToLower())) : (a.noteReason == a.noteReason)) &&
        //         (!string.IsNullOrEmpty(sCreatedBy) ? (a.createdBy.ToLower().Contains(sCreatedBy.ToLower())) : (a.createdBy == a.createdBy)) &&
        //         ((dtCreatedDate != null) ?
        //         (a.dateCreated.Value.Date >= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtCreatedDate.Value).dtMinDate) &&
        //         a.dateCreated.Value.Date <= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtCreatedDate.Value).dtMaxDate))
        //         : (a.dateCreated == a.dateCreated)) &&
        //         ((dtActualDate != null) ? (a.actualDate.Value.Date >= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtActualDate.Value).dtMinDate) && a.actualDate.Value.Date <= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtActualDate.Value).dtMaxDate)) : (a.actualDate == a.actualDate)) &&
        //         ((dtDateNeeded != null) ? (a.dateNeeded.Value.Date >= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtDateNeeded.Value).dtMinDate) && a.dateNeeded.Value.Date <= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtDateNeeded.Value).dtMaxDate)) : (a.dateNeeded == a.dateNeeded)) &&
        //         (!string.IsNullOrEmpty(sStatus) ? (a.status.ToLower().Contains(sStatus.ToLower())) : (a.status == a.status)) &&
        //         ((dtDateCompleted != null) ? (a.dateComplete.Value.Date >= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtDateCompleted.Value).dtMinDate) && a.dateComplete.Value.Date <= TimeZoneInfo.ConvertTimeToUtc(CommonFunctions.getMinAndMaxDates(dtDateCompleted.Value).dtMaxDate)) : (a.dateComplete == a.dateComplete))
        //         ).OrderByDescending(a => a.dateCreated).ToList();

        //        patientNotes.AddRange(ObjectMapper.Map<List<PatientNotes>, List<PatientNotesDTO>>(vPatientNotes));

        //        return patientNotes;  //Return the Notes List for the Patient
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new UserFriendlyException(ex.Message);
        //    }
        //}

        //Notes List,search by Patient Id
        //public async Task<List<PatientNotesSearchDTO>> notesSearch(Guid gPatientId, Guid gOrderId, Guid gClaimId, string sNoteId, string sPatientName, string sNoteType, string sReason, string sSubject, string sDescription, 
        //      string sCreatedBy, Nullable<DateTime> dtCreatedDate, string sStatus)
        //{
        //    try
        //    {
        //        if (string.IsNullOrEmpty(gPatientId.ToString()))
        //        {
        //            throw new UserFriendlyException("Patient Guid is Required");
        //        }
        //        var vNotes = await _notesRepository.GetListAsync();
        //        var vPatients = await _personalRepository.GetListAsync();
        //        var vMasterNotes = await _masterNotesRepository.GetListAsync();
        //        var vUsers = await _usersRepository.GetListAsync();
        //        var vStatus = await _notesStatusRepository.GetListAsync();
        //        var vSeverity = await _notesSeverityRepository.GetListAsync();



        //        //Filter by Patient Id
        //        //if (gPatientId != Guid.Empty)
        //        //{
        //        //    vNotes = vNotes.Where(a => a.patientId == gPatientId && a.orderId == null && a.claimId == null).ToList();
        //        //}
        //        //Filter by Order
        //        if (gOrderId != Guid.Empty)
        //        {
        //            vNotes = vNotes.Where(a => a.orderId == gOrderId).ToList();
        //        }
        //        //Filter by Claim
        //        if (gClaimId != Guid.Empty)
        //        {
        //            vNotes = vNotes.Where(a => a.claimId == gClaimId).ToList();
        //        }


        //        var vNotesList = vNotes.Select(a => new PatientNotesSearchDTO
        //        {
        //            notesId = a.Id,
        //            patientId = a.patientId,
        //            defaultPatientId = (vPatients.Where(c => c.Id == a.patientId).Select(b => b.defaultPatientId).FirstOrDefault()),
        //            patientName = (vPatients.Where(c => c.Id == a.patientId).Select(b => b.fullName).FirstOrDefault()),
        //            defaultNotesId = a.defaultNotesId,
        //            createdBy = a.createdBy,
        //            dateCreated = a.dateCreated,
        //            actualDate = a.actualDate,
        //            dateNeeded = a.dateNeeded,
        //            status = a.status,
        //            dateComplete = a.dateComplete,
        //            noteReason = a.noteReason,
        //            severity = a.severity,
        //            subject = a.subject,
        //            noteType = a.noteType,
        //            userName = (vUsers.Where(f => f.Id == a.createdBy).Select(g => g.UserName).FirstOrDefault()),
        //            description = a.description,
        //            //followUpDate = a.followUpDate,
        //            reasonData = (vMasterNotes.Where(d => d.Id == a.noteReason).Select(e => e.noteReason).FirstOrDefault()),
        //            statusData = (vStatus.Where(b => b.statusShortCodeId == a.status).Select(b => b.statusType).FirstOrDefault()),
        //            severityData = (vSeverity.Where(c => c.severityShortCodeId == a.severity).Select(c => c.severityType).FirstOrDefault())
        //        }).ToList();



        //        //Filter the Patient Notes by parameters
        //        vNotesList = vNotesList.Where(a =>
        //        (!string.IsNullOrEmpty(sNoteId) ? (a.defaultNotesId.ToLower().Contains(sNoteId.ToLower())) : (a.defaultNotesId == a.defaultNotesId)) &&
        //        (!string.IsNullOrEmpty(sPatientName) ? (a.patientName.ToLower().Contains(sNoteId.ToLower())) : (a.patientName == a.patientName)) &&
        //        (!string.IsNullOrEmpty(sNoteType) && !string.IsNullOrEmpty(a.noteType.ToString()) ? (a.noteType.ToString().ToLower().Contains(sNoteType.ToLower())) : (a.noteType.ToString() == a.noteType.ToString())) &&
        //        (!string.IsNullOrEmpty(sReason) && !string.IsNullOrEmpty(a.reasonData) ? (a.reasonData.ToString().ToLower().Contains(sReason.ToLower())) : (a.reasonData == a.reasonData)) &&
        //        (!string.IsNullOrEmpty(sDescription) ? (a.description.ToLower().Contains(sDescription.ToLower())) : (a.description == a.description)) &&
        //        (!string.IsNullOrEmpty(sSubject) ? (a.subject.ToLower().Contains(sSubject.ToLower())) : (a.subject == a.subject)) &&
        //         (!string.IsNullOrEmpty(sCreatedBy) ? (a.userName.ToLower().Contains(sCreatedBy.ToLower())) : (a.userName == a.userName)) &&
        //         (!string.IsNullOrEmpty(sStatus) ? (a.statusData.ToLower().Contains(sStatus.ToLower())) : (a.statusData == a.statusData))
        //         ).ToList();



        //        //Filter using Date of Service
        //        if (dtCreatedDate != null)
        //        {
        //            DateTime maxDate = TimeZoneInfo.ConvertTimeToUtc(new DateTime(dtCreatedDate.Value.Year, dtCreatedDate.Value.Month, dtCreatedDate.Value.Day, 23, 59, 59));
        //            DateTime minDate = TimeZoneInfo.ConvertTimeToUtc(new DateTime(dtCreatedDate.Value.Year, dtCreatedDate.Value.Month, dtCreatedDate.Value.Day, 00, 00, 00));
        //            vNotesList = vNotesList.Where(a => (a.dateCreated.HasValue) &&
        //            (a.dateCreated.Value.Date >= minDate.Date &&
        //            a.dateCreated.Value.Date <= maxDate.Date)).ToList();
        //        }

        //        return vNotesList;  //Return the Notes List for the Patient
        //    }
        //    catch (Exception ex)
        //    {
        //        throw new UserFriendlyException(ex.Message);
        //    }
        //}
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Default)]
        public async Task<List<PatientNotesSearchDTO>> notesSearch(Guid gPatientId, Guid gOrderId, Guid gClaimId, string sNoteId, string sPatientName,
            string sDefaultPatientId, string sNoteType, string sReason, string sSubject, string sDescription,
            string sCreatedBy, Nullable<DateTime> dtCreatedDate, string sStatus, DateTime start_Date, DateTime end_Date, string assignedToName, Nullable<DateTime> assignedDate)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                if (string.IsNullOrEmpty(gPatientId.ToString()))
                {
                    throw new UserFriendlyException("Patient Guid is Required");
                }
                var vNotes = (await _notesRepository.GetListAsync()).ToList();
                var vPatients = (await _personalRepository.GetListAsync()).ToList();
                var vMasterNotes = (await _masterNotesRepository.GetListAsync()).ToList();
                var vUsers = (await _usersRepository.GetListAsync()).ToList();
                //var vStatus = (await _notesStatusRepository.GetListAsync()).ToList();
                var vSeverity = (await _notesSeverityRepository.GetListAsync()).ToList();
                var inbonddetails = await _inboundDocumentRepository.GetListAsync();

                //Filter by Patient Id
                if (gPatientId != Guid.Empty)
                {
                    vNotes = vNotes.Where(a => a.patientId == gPatientId).ToList();
                }
                //Filter by Order
                if (gOrderId != Guid.Empty)
                {
                    vNotes = vNotes.Where(a => a.orderId == gOrderId).ToList();
                }
                //Filter by Claim
                if (gClaimId != Guid.Empty)
                {
                    vNotes = vNotes.Where(a => a.claimId == gClaimId).ToList();
                }



                //  res  its retrive notes details from inbonddocuments
                var patientNotesList1 = (from inboundDocument in inbonddetails
                                         join patient in vPatients on inboundDocument.patientId equals patient.Id
                                         where !string.IsNullOrEmpty(inboundDocument.comments)
                                         select new PatientNotesSearchDTO
                                         {
                                             patientId = inboundDocument.patientId ?? Guid.Empty,
                                             description = inboundDocument.comments,
                                             // noteType = "general"
                                         }).ToList();


                List<PatientNotesSearchDTO> vList = new List<PatientNotesSearchDTO>();
                vList = vNotes.Select(a => new PatientNotesSearchDTO
                {
                    notesId = a.notesId == Guid.Empty ? a.notesId = a.Id : a.notesId,
                    Id = a.Id,
                    patientId = a.patientId.Value,
                    defaultPatientId = (vPatients.Where(c => c.Id == a.patientId).Select(b => b.defaultPatientId).FirstOrDefault()) == null ? " " : (vPatients.Where(c => c.Id == a.patientId).Select(b => b.defaultPatientId).FirstOrDefault()),
                    patientName = (vPatients.Where(c => c.Id == a.patientId).Select(b => b.fullName).FirstOrDefault()) == null ? " " : (vPatients.Where(c => c.Id == a.patientId).Select(b => b.fullName).FirstOrDefault()),
                    defaultNotesId = a.defaultNotesId,
                    createdBy = a.createdBy,
                    dateCreated = a.dateCreated,
                    modifiedDate = a.modifiedDate,
                    actualDate = a.actualDate,
                    dateNeeded = a.dateNeeded,
                    status = a.status,
                    dateComplete = a.dateComplete,
                    //noteReason = a.noteReason,
                    severity = a.severity,
                    subject = a.subject,
                    noteTypeId = a.noteTypeId,
                    noteType = a.noteType,
                    userName = (vUsers.Where(f => f.Id == a.createdBy).Select(g => g.UserName).FirstOrDefault()),
                    description = a.description != null ? a.description : "",
                    //followUpDate = a.followUpDate,
                    //reasonData = (vMasterNotes.Where(d => d.Id == a.noteReason).Select(e => e.noteReason).FirstOrDefault()),
                    //statusData = (vStatus.Where(b => b.statusShortCodeId == a.status).Select(b => b.statusType).FirstOrDefault()),
                    //reasonData = (vMasterNotes.FirstOrDefault(d => d.Id == a.noteReason)?.noteReason) ?? "WIPNote",
                    //subject = (vNotes.FirstOrDefault(d => d.Id == a.noteReason)?.subject) ?? "WIPNote",
                    severityData = (vSeverity.Where(c => c.severityShortCodeId == a.severity).Select(c => c.severityType).FirstOrDefault()),
                    assignedTo = a.assignedTo,
                    assignedDate = a.assignedDate,
                    LastModificationTime = a.LastModificationTime,
                    CreationTime = a.CreationTime
                }).ToList();

                var filteredList = vList.Where(a =>
                      (string.IsNullOrEmpty(sNoteId) || a.defaultNotesId != null && a.defaultNotesId.ToLower().Contains(sNoteId.ToLower())) &&
            (string.IsNullOrEmpty(sPatientName) || a.patientName != null && a.patientName.ToLower().Contains(sPatientName.ToLower())) &&
            (string.IsNullOrEmpty(sDefaultPatientId) || a.defaultPatientId != null && a.defaultPatientId.ToLower().Contains(sDefaultPatientId.ToLower())) &&
            (string.IsNullOrEmpty(sNoteType) || a.noteType != null && a.noteType.ToString().Contains(sNoteType.ToLower())) &&
            (string.IsNullOrEmpty(sReason) || a.reasonData != null && a.reasonData.ToLower().Contains(sReason.ToLower())) &&
            (string.IsNullOrEmpty(sSubject) || a.subject != null && a.subject.ToLower().Contains(sSubject.ToLower())) &&
            (string.IsNullOrEmpty(sDescription) || a.description != null && a.description.ToLower().Contains(sDescription.ToLower())) &&
            (string.IsNullOrEmpty(sCreatedBy) || a.createdBy != null && a.createdBy.ToString().Contains(sCreatedBy.ToLower())) &&
            (dtCreatedDate == null || a.dateCreated != null && a.dateCreated?.Date == dtCreatedDate.Value.Date) &&
            (string.IsNullOrEmpty(sStatus) || a.status != null && a.status.ToLower().Contains(sStatus.ToLower())) &&
            (string.IsNullOrEmpty(assignedToName) || a.assignedToName != null && a.assignedToName.ToLower().Contains(assignedToName.ToLower()))
        ).ToList();

                if (start_Date != DateTime.MinValue || end_Date != DateTime.MinValue)
                {
                    filteredList = filteredList.Where(a => a.dateCreated >= start_Date && a.dateCreated <= end_Date).ToList();

                    return filteredList;
                }
                filteredList = filteredList.OrderByDescending(x => DateTime.Compare(x.LastModificationTime.GetValueOrDefault(x.CreationTime), x.CreationTime) <= 0 ? x.CreationTime : x.LastModificationTime).ToList();

                return filteredList;   //Return the Notes List for the Patient
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }

        //string sNoteId, string sNoteType, string sReason, string sSubject, 

        //public async Task<List<PatientNotesSearchDTO>> GetNoteSearch(string sNoteid, string sNoteType, string sReason, string sSubject, string sDescription, 
        //    string sCreatedBy, string sStatus, Nullable<DateTime> dtCreatedDate, DateTime start_Date, DateTime end_Date)

        //{

        //    try

        //    {
        //        var vnotes = await _notesRepository.GetListAsync();
        //        var vPatients = (await _personalRepository.GetListAsync()).ToList();
        //        var vMasterNotes = (await _masterNotesRepository.GetListAsync()).ToList();
        //        var vUsers = (await _usersRepository.GetListAsync()).ToList();
        //        var vStatus = (await _notesStatusRepository.GetListAsync()).ToList();
        //        var vSeverity = (await _notesSeverityRepository.GetListAsync()).ToList();


        //        List<PatientNotesSearchDTO> vNotesList = new List<PatientNotesSearchDTO>();
        //        vNotesList = vnotes.Select(a => new PatientNotesSearchDTO

        //        {
        //            defaultNotesId = a.defaultNotesId,
        //            //notesId = a.Id,
        //            noteType = a.noteType,
        //            reasonData = (vMasterNotes.FirstOrDefault(d => d.Id == a.noteReason)?.noteReason),
        //            subject = a.subject,
        //            description = a.description,
        //            createdBy = a.createdBy,
        //            status = a.status,
        //            dateCreated = a.dateCreated,
        //            defaultPatientId = (vPatients.Where(c => c.Id == a.patientId).Select(b => b.defaultPatientId).FirstOrDefault()) == null ? " " : (vPatients.Where(c => c.Id == a.patientId).Select(b => b.defaultPatientId).FirstOrDefault()),
        //            patientName = (vPatients.Where(c => c.Id == a.patientId).Select(b => b.fullName).FirstOrDefault()) == null ? " " : (vPatients.Where(c => c.Id == a.patientId).Select(b => b.fullName).FirstOrDefault()),

        //            // patientId = a.patientId,
        //            //actualDate = a.actualDate,
        //            //dateNeeded = a.dateNeeded,
        //            //  dateComplete = a.dateComplete,

        //            //severity = a.severity,
        //            // userName = (vUsers.Where(f => f.Id == a.createdBy).Select(g => g.UserName).FirstOrDefault()),
        //            //reasonData = (vMasterNotes.Where(d => d.Id == a.noteReason).Select(e => e.noteReason).FirstOrDefault()),
        //            //statusData = (vStatus.Where(b => b.statusShortCodeId == a.status).Select(b => b.statusType).FirstOrDefault()),
        //            // severityData = (vSeverity.Where(c => c.severityShortCodeId == a.severity).Select(c => c.severityType).FirstOrDefault())
        //        }).ToList();

        //        if (!string.IsNullOrEmpty(sNoteid))
        //        {
        //            vNotesList = vNotesList.Where(a => a.defaultNotesId.ToString().Contains(sNoteid)).ToList();
        //        }

        //        if (!string.IsNullOrEmpty(sNoteType))
        //        {
        //            vNotesList = vNotesList.Where(a => a.noteType.ToString().Contains(sNoteType)).ToList();
        //        }

        //        if (!string.IsNullOrEmpty(sReason))
        //        {
        //            vNotesList = vNotesList.Where(a => a.reasonData.ToString().Contains(sReason)).ToList();
        //        }
        //        if (!string.IsNullOrEmpty(sSubject))
        //        {
        //            vNotesList = vNotesList.Where(a => a.subject.ToString().Contains(sSubject)).ToList();
        //        }
        //        if (!string.IsNullOrEmpty(sDescription))
        //        {
        //            vNotesList = vNotesList.Where(a => a.description.ToString().Contains(sDescription)).ToList();
        //        }
        //        if (!string.IsNullOrEmpty(sCreatedBy))
        //        {
        //            vNotesList = vNotesList.Where(a => a.createdBy.ToString().Contains(sCreatedBy)).ToList();
        //        }

        //        if (!string.IsNullOrEmpty(sStatus))
        //        {
        //            vNotesList = vNotesList.Where(a => a.status.ToString().Contains(sStatus)).ToList();
        //        }



        //        if (dtCreatedDate != null)
        //        {
        //            DateTime searchDate = dtCreatedDate.Value.Date; 
        //            vNotesList = vNotesList.Where(a => a.dateCreated == searchDate).ToList();
        //        }


        //        // start date and end date


        //        if (start_Date == DateTime.MinValue || end_Date == DateTime.MinValue)
        //        {
        //            return vNotesList;
        //        }
        //        else
        //        {
        //            vNotesList = vNotesList.Where(a => a.dateCreated >= start_Date && a.dateCreated <= end_Date).ToList();

        //            return vNotesList;
        //        }







        //        return vNotesList;

        //    }
        //    catch (Exception ex)
        //    {
        //        throw new UserFriendlyException(ex.Message);
        //    }
        //}
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Default)]
        public async Task<List<PatientNotesDTO>> GetPatientNotesById(Guid patientID)
        {
            try
            {
                


                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                var vNote = (await _notesRepository.GetListAsync(x => x.patientId == patientID))
                   .Select(x => new PatientNotesDTO
                   {

                       patientId = x.patientId.Value,
                       noteType = x.noteType,
                       //noteReason = x.noteReason,
                       createdBy = x.createdBy,
                       subject = x.subject,
                       description = x.description,
                   })
                   .ToList();
                return vNote;
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }

        }

        //anandhaeswari
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Create)]
        public async Task<string> InsertNotesDetails(string Notes, Guid documentID, bool isCallNote, Guid noteTypeId, string noteType)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Create);
                //insert comments into notes if not empty
                if (!string.IsNullOrEmpty(Notes))
                {
                    ////to get WIP notes Guid
                    //var vMasterNotes = (await _masterNotesRepository.GetListAsync(t => t.noteReason.ToLower().Contains("Pending Fax") && t.noteType == OrderManagement.Order.NoteType.faxNote && t.TenantId == CurrentTenant.Id));
                    //Guid gNotesId = Guid.Empty;

                    //if (vMasterNotes.Count == 0)
                    //{

                    //    MasterNotes mNotes = new MasterNotes();
                    //    mNotes.noteType = OrderManagement.Order.NoteType.faxNote;
                    //    mNotes.noteReason = "Pending Fax";
                    //    mNotes.TenantId = CurrentTenant.Id;
                    //    var vNote = await _masterNotesRepository.InsertAsync(mNotes);
                    //    gNotesId = vNote.Id;
                    //}
                    //else
                    //{
                    //    gNotesId = vMasterNotes.Count > 0 ? vMasterNotes.LastOrDefault().Id : Guid.Empty;
                    //}

                    //to get WIP notes Guid
                    var vMasterNotes = (await _masterNotesRepository.GetListAsync(t => t.noteType.ToLower().Contains("Pending Fax") && t.TenantId == CurrentTenant.Id));
                    Guid gNotesId = Guid.Empty;

                    if (vMasterNotes.Count == 0)
                    {

                        MasterNotes mNotes = new MasterNotes();
                        //mNotes.noteType = OrderManagement.Order.NoteType.faxNote;
                        mNotes.noteType = "Pending Fax";
                        mNotes.TenantId = CurrentTenant.Id;
                        var vNote = await _masterNotesRepository.InsertAsync(mNotes);
                        gNotesId = vNote.Id;
                    }
                    else
                    {
                        gNotesId = vMasterNotes.Count > 0 ? vMasterNotes.LastOrDefault().Id : Guid.Empty;
                    }

                    //insert comments into notes collection
                    PatientNotes notes = new PatientNotes();
                    //notes.noteReason = gNotesId;
                    notes.noteTypeId = noteTypeId;
                    notes.noteType = noteType;
                    notes.description = Notes;
                    Int64 iNotesCount = await _notesRepository.GetCountAsync();
                    notes.patientId = Guid.Empty;
                    notes.TenantId = CurrentTenant.Id;
                    notes.createdBy = CurrentUser.Id.Value;
                    notes.documentId = documentID;
                    notes.isCallNote = isCallNote;
                    notes.dateCreated = DateTime.Now;
                    await _notesRepository.InsertAsync(notes);
                    return "Insert Successfully";
                }
                return "Notes Check";

            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }

        }

        //anandhaeswari
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Default)]
        /*  public async Task<PatientNotesDeatils> GetPatientNotesByIdV1(Guid patientID)
          {
              try
              {
                  await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                  var vPatientDetails = await _personalRepository.GetAsync(patientID);
                  var allNotes = (await _notesRepository.GetListAsync(x => x.patientId == patientID))
                      .Select(x => new patientNotesDetailsDTO
                      {
                          notesId = x.Id,
                          patientId = x.patientId.Value,
                          patientName = vPatientDetails != null ? vPatientDetails.fullName : "",
                          noteType = x.noteType,
                          noteTypeId = x.noteTypeId,
                          chartNo = vPatientDetails != null ? vPatientDetails.chartId : "",
                          createdBy = x.createdBy,
                          creationTime = x.CreationTime,
                          LastModificationTime = x.LastModificationTime,
                          description = x.description,
                          modifiedBy = x.LastModifierId != null ? _usersRepository.Where(t => t.Id == x.LastModifierId.Value).Select(t => t.UserName).SingleOrDefault() : "",
                          modifiedDate = x.modifiedDate,
                          createdByName = x.createdByName,

                      }).OrderByDescending(x => DateTime.Compare(x.LastModificationTime.GetValueOrDefault(x.creationTime), x.creationTime) <= 0 ? x.creationTime : x.LastModificationTime).ToList();

                  var result = new PatientNotesDeatils
                  {
                      AllNotes = allNotes,
                      LastNoteDescription = allNotes.Count > 0 ? allNotes.FirstOrDefault()?.description : null,
                      patientName = vPatientDetails != null ? vPatientDetails.fullName : "",
                      chartId = vPatientDetails != null ? vPatientDetails.chartId : "",
                  };

                  return result;
              }
              catch (Exception ex)
              {
                  throw new UserFriendlyException(ex.Message);
              }
          }*/

        public async Task<PatientNotesDeatils> GetPatientNotesByIdV1(Guid patientID)
        {
            try
            {
                PatientNotesDTO notesobj = new PatientNotesDTO();
                var data = _notesRepository.GetAsync(x => x.Id == patientID);
                if (data == _currentUser.Id)
                {
                    notesobj.iscreateduser = true;
                }
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                var vPatientDetails = _personalRepository.FirstOrDefault(a => a.Id == patientID);
                var vUserList = await _usersRepository.GetListAsync();
                var vNoteType = await _masterNotesRepository.GetListAsync();
                var allNotes = _notesRepository.Where(x => x.patientId == patientID && x.noteTypeId != Guid.Empty && !string.IsNullOrEmpty(x.noteType))
                    .Select(x => new patientNotesDetailsDTO
                    {
                        notesId = x.Id,
                        patientId = x.patientId.Value,
                        patientName = vPatientDetails != null ? vPatientDetails.fullName : "",
                        //noteType = (x.noteTypeId != null && x.noteTypeId != default) ? vNoteType.FirstOrDefault(b => b.Id == x.noteTypeId).noteType : default,
                        noteTypeId = x.noteTypeId,
                        chartNo = vPatientDetails != null ? vPatientDetails.chartId : "",
                        createdBy = (Guid)x.CreatorId != Guid.Empty ? (Guid)x.CreatorId : Guid.Empty,
                        creationTime = x.CreationTime,
                        LastModificationTime = x.LastModificationTime.HasValue ? x.LastModificationTime.Value : null,
                        description = x.description != null ? x.description : (x.NotesDetails != null ? x.NotesDetails : null),
                        modifiedId = x.LastModifierId != null && x.LastModifierId != Guid.Empty ? x.LastModifierId : null,
                        modifiedDate = x.modifiedDate != null ? x.modifiedDate : null,
                        createdByName = x.createdByName != null ? x.createdByName : null,
                    }).ToList().Select(a => new patientNotesDetailsDTO
                    {
                        notesId = a.notesId,
                        patientId = a.patientId,
                        patientName = a.patientName,
                        noteType = a.noteTypeId != null ? (vNoteType.Where(b => b.Id == a.noteTypeId).Select(i => i.noteType).FirstOrDefault() != null ? vNoteType.Where(b => b.Id == a.noteTypeId).Select(i => i.noteType).FirstOrDefault()
                        : null) : null,
                        noteTypeId = a.noteTypeId,
                        chartNo = a.chartNo,
                        createdBy = a.createdBy,
                        creationTime = a.creationTime,
                        LastModificationTime = a != null && a.LastModificationTime.HasValue ? a.LastModificationTime.Value : null,
                        description = a.description,
                        modifiedBy = a != null && a.modifiedId != null ? (vUserList.Where(t => t.Id == a.modifiedId).Select(i => i.Name).FirstOrDefault() != null ? vUserList.Where(t => t.Id == a.modifiedId).Select(i => i.Name).FirstOrDefault() : "") : "",
                        modifiedDate = a != null && a.modifiedDate != null ? a.modifiedDate : null,
                        createdByName = a != null && a.createdBy != null ? (vUserList.Where(t => t.Id == a.createdBy).Select(i => i.Name).FirstOrDefault() != null ? vUserList.Where(t => t.Id == a.createdBy).Select(i => i.Name).FirstOrDefault() : "") : "",
                        //}).ToList().OrderByDescending(a => a.creationTime).ToList();
                    }).ToList().OrderByDescending(x => DateTime.Compare(x.LastModificationTime.GetValueOrDefault(x.creationTime), x.creationTime) <= 0 ? x.creationTime : x.LastModificationTime).ToList();

                var result = new PatientNotesDeatils
                {
                    AllNotes = allNotes,
                    LastNoteDescription = allNotes.Count > 0 ? allNotes.FirstOrDefault()?.description : null,
                    patientName = vPatientDetails != null ? vPatientDetails.fullName : "",
                    chartId = vPatientDetails != null ? vPatientDetails.chartId : "",
                };

                return result;
            }
            catch (Exception ex)
            {
                throw new UserFriendlyException(ex.Message);
            }
        }
        //anandhaeswari
        [AbpAuthorize(PatientManagementPermissions.PatientNotes.Default)]
        public async Task<patientDescription> GetPatientNotes(Guid notesID)
        {
            try
            {
                await _permissionChecker.PermissionCheck(PatientManagementPermissions.PatientNotes.Default);
                var vPatientNotes = (await _notesRepository.GetListAsync(a => a.Id == notesID))
         .Select(x => new patientDescription
         {
             Id = x.Id,
             Description = x.description,
         })
         .FirstOrDefault();

                return vPatientNotes;
            }
            catch (Exception ex)
            {

                throw new UserFriendlyException(ex.Message);
            }

        }



    }
}

