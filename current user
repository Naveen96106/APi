 public async Task<ResupplyPatientDetailsDTO> GetResupplyPatientDetails(Guid patientId)
 {
     try
     {

         var patientDetails = _patientPersonalRepository.Where(x => x.Id == patientId).FirstOrDefault();
         if (patientDetails == null)
         {
             throw new UserFriendlyException("Patient not exist");
         }

         var patientBalance = _patientBalanceRepository.Where(x => x.PatientId == patientId && x.isActive == true).FirstOrDefault();

         var patientClinicalDetails = patientDetails != null ? _patientClinicalRepository.Where(x => x.patientId == patientId).FirstOrDefault() : null;

         var patientPraticeDetails = patientClinicalDetails != null ? _practiceManagementRepository.Where(x => x.Id == patientClinicalDetails.referringProviderFacilityId).FirstOrDefault() : null;

         var patientOrderDetails = _mmOrderRepository.Where(x => x.PatientId == patientId).FirstOrDefault();

         //List of Call Notes Of the Patient
         var patientCallNotes = _notesRepository.Where(x => x.patientId == patientId).ToList();

         //Users for createdByName Field
         var users = await _userRepository.GetListAsync();

         PatientAddress address = new PatientAddress();

         //Getting Address from Patient Address Repo
         var patientAddress = await _patientAddressRepository.GetListAsync(a => a.patientId == patientId && a.addressType == AddressType.Billing);

         address = patientAddress.Where(x => x.emailId != "").FirstOrDefault();

         if (address.emailId == null)
         {
             address = _patientAddressRepository.Where(a => a.patientId == patientId && a.addressType == AddressType.Delivery).FirstOrDefault();
         }

         //Get Latest 5 Call Notes
         #region CallNotesList
         List<ResupplyCallNoteListDTO> callNoteList = patientCallNotes
                      .Where(t => t.isCallNote == true)
                      .OrderByDescending(t => t.CreationTime)
                      .Select(x => new ResupplyCallNoteListDTO
                      {
                          notesId = x.Id,
                          description = x.description,
                          creationTime = x.CreationTime,
                          createdBy = x.createdBy,
                          createdByName = users.Where(z => z.Id == x.createdBy).Select(c => c.Name).FirstOrDefault(),
                          noteType = x.noteType,
                          noteTypeId = x.noteTypeId
                      })
                      .Take(5).ToList();
         #endregion

         var practionerDetailsFromOrder = _practiceManagementRepository.Where(x => x.Id == patientOrderDetails.ReferralPracticeId).FirstOrDefault();

         if (practionerDetailsFromOrder == null)
         {
             throw new UserFriendlyException("Patient Does not have a Practitioner");
         }
         return new ResupplyPatientDetailsDTO
         {
             PatientName = patientDetails.fullName,
             PatientId = patientDetails.Id,
             PatientBalance = patientBalance.patientBalance != null ? patientBalance.patientBalance : 0,
             InsuranceBalance = patientBalance.insurancePending != null ? patientBalance.insurancePending : 0,
             insuranceRecoopAmount = patientBalance.insuranceRecoopAmount != null ? patientBalance.insuranceRecoopAmount : 0,
             TotalBalance = patientBalance.TotalBalance != null ? patientBalance.TotalBalance : 0,
             NextCallDate = patientDetails.NextCallDate != null ? patientDetails.NextCallDate : default,
             NewsetupDate = patientDetails.setupDate != null ? patientDetails.setupDate : default,
             RXDate = patientDetails.RxDate != null ? patientDetails.RxDate : patientOrderDetails.RxDate != null ? patientOrderDetails.RxDate : null,
             email = patientDetails.emailId != "" ? patientDetails.emailId : address.emailId != "" ? address.emailId : "",
             cellNo = patientDetails.cellNo != null ? patientDetails.cellNo : address.mobile != null ? address.mobile : null,
             //homeNo = patientDetails.homePhoneNo != null ? patientDetails.homePhoneNo : patientAddressDetails.mobile != null ? patientAddressDetails.mobile : null,
             PractitionerId = patientPraticeDetails != null ? patientPraticeDetails.Id : patientOrderDetails.ReferralPracticeId != null ? patientOrderDetails.ReferralPracticeId : null,
             PractitionerName = patientPraticeDetails != null ? patientPraticeDetails.practiceName : practionerDetailsFromOrder.practiceName != null ? practionerDetailsFromOrder.practiceName : null,
             callNotes = callNoteList
         };
     }
     catch (Exception e)
    {
         throw new UserFriendlyException(e.The object reference error is occurring because you're trying to access the `emailId` field on a `null` object when the patient's address is not found or the email is null. To prevent this, you need to check whether `address` is `null` before trying to access its `emailId` field.

Here’s how you can fix it:

1. Ensure that `address` is not `null` before accessing its properties.
2. Use the null-coalescing operator (`??`) or conditional access operator (`?.`) to safely access fields that might be null.

Here’s the corrected section of the code:

```csharp
// Getting Address from Patient Address Repo
var patientAddress = await _patientAddressRepository.GetListAsync(a => a.patientId == patientId && a.addressType == AddressType.Billing);

address = patientAddress.Where(x => !string.IsNullOrEmpty(x.emailId)).FirstOrDefault();

if (address == null || string.IsNullOrEmpty(address.emailId))
{
    address = _patientAddressRepository.Where(a => a.patientId == patientId && a.addressType == AddressType.Delivery)
               .Where(a => !string.IsNullOrEmpty(a.emailId)) // Ensure emailId is not empty
               .FirstOrDefault();
}

// When accessing emailId, use null-coalescing operator
string email = !string.IsNullOrEmpty(patientDetails.emailId) 
                ? patientDetails.emailId 
                : address?.emailId ?? string.Empty;
```

This way:

- `address?.emailId` ensures you only access `emailId` if `address` is not null.
- The `?? string.Empty` ensures that if both `emailId` and `address.emailId` are null or empty, you default to an empty string, which avoids the null reference error.

By adding these checks, you’ll avoid any potential null reference exceptions when trying to access `emailId`.
