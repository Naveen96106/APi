var vdata = new List<Glossary>
        {
            new Glossary
            {
                glossaryCode="OA 23",
                description="The impact of prior payer(s) adjudication including payments and/or adjustments",
                isActive=1,
                TenantId=CurrentTenant.Id,
            },
               new Glossary
            {
                glossaryCode="OA 18",
                description="Duplicate claim/service",
                isActive=1,
                TenantId=CurrentTenant.Id,
            },
                  new Glossary
            {
                glossaryCode="PR 100",
                description="TPayment made to patient/insured/responsible party/employer.",
                isActive=1,
                TenantId=CurrentTenant.Id,
            },
                     new Glossary
            {
                glossaryCode="PR 2",
                description="Coinsurance Amount",
                isActive=1,
                TenantId=CurrentTenant.Id,
            },
};
await _glossaryRepository.InsertManyAsync(vdata, autoSave: true);
var newGlossaries = new List<Glossary>
{
    new Glossary
    {
        glossaryCode = "OA 24",
        description = "New glossary description for OA 24",
        isActive = 1,
        TenantId = CurrentTenant.Id,
    },
    new Glossary
    {
        glossaryCode = "PR 101",
        description = "New payment description",
        isActive = 1,
        TenantId = CurrentTenant.Id,
    },
};

// Fetch existing glossary codes from the repository
var existingGlossaries = await _glossaryRepository.GetAllAsync();
var existingCodes = existingGlossaries.Select(g => g.glossaryCode).ToHashSet();

// Filter out any new glossaries that already exist
var glossariesToAdd = newGlossaries
    .Where(g => !existingCodes.Contains(g.glossaryCode))
    .ToList();

if (glossariesToAdd.Any())
{
    await _glossaryRepository.InsertManyAsync(glossariesToAdd, autoSave: true);
}




var vdata = new List<Glossary>
{
    new Glossary
    {
        glossaryCode="OA 23",
        description="The impact of prior payer(s) adjudication including payments and/or adjustments",
        isActive=1,
        TenantId=CurrentTenant.Id,
    },
    new Glossary
    {
        glossaryCode="OA 18",
        description="Duplicate claim/service",
        isActive=1,
        TenantId=CurrentTenant.Id,
    },
    new Glossary
    {
        glossaryCode="PR 100",
        description="Payment made to patient/insured/responsible party/employer.",
        isActive=1,
        TenantId=CurrentTenant.Id,
    },
    new Glossary
    {
        glossaryCode="PR 2",
        description="Coinsurance Amount",
        isActive=1,
        TenantId=CurrentTenant.Id,
    },
};

foreach (var glossary in vdata)
{
    // Check if a glossary with the same glossaryCode already exists
    var existingGlossary = await _glossaryRepository.FirstOrDefaultAsync(
        g => g.glossaryCode == glossary.glossaryCode && g.TenantId == glossary.TenantId
    );

    // Insert only if it doesn't exist
    if (existingGlossary == null)
    {
        await _glossaryRepository.InsertAsync(glossary, autoSave: true);
    }
}
